/** \file LogFile.cpp
 * Fast HTTP Auth Scanner Module -  Store logs for HTTP trafic generated by FHScan Proxy
 *
 * \author Andres Tarasco Acuna - http://www.tarasco.org (c) 2007 - 2008
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../CallBack.h"
//#include "../HTTPCore/Build.h"
#include "LogFile.h"

#ifndef _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#endif

FILE *Session = NULL;
const char LogFileName[]="HTTP_Session.log";

/******************************************************************************/
//! CallBack Function. This function is called from the DoCallBack() function once its registered and will intercept the callback information.
/*!
	\param cbType CallBack Source Type. Valid options are CBTYPE_CLIENT_REQUEST , CBTYPE_CLIENT_RESPONSE , CBTYPE_BROWSER_REQUEST , CBTYPE_SERVER_RESPONSE
	\param HTTPHandle HTTP Connection Handle with information about remote target (like ip address, port, ssl, protocol version,...)
	\param prequest struct containing all information related to the HTTP Request.
	\param presponse struct containing information about http reponse. This parameter could be NULL if the callback type is CBTYPE_CLIENT_REQUEST or CBTYPE_CLIENT_RESPONSE because request was not send yet.
	\return the return value CBRET_STATUS_NEXT_CB_CONTINUE indicates that the request (modified or not) its ok. If a registered handler blocks the request then CBRET_STATUS_CANCEL_REQUEST is returned. This value indicates that the response is locked
    \note This function does not block requests, only tries to decode HTTP response.
*/
/******************************************************************************/
int CBLogFile(int cbType,HTTPHANDLE HTTPHandle,PHTTP_DATA  *prequest,PHTTP_DATA *presponse)
{
	PHTTP_DATA request = *prequest;
	PHTTP_DATA response = *presponse;

	const char RequestHeader[]="Request Information:\n";
	const char ResponseHeader[]="Response Information:\n";
	const char Delim[]="---------------------------------\n";

	if (Session == NULL) {
		Session=fopen(LogFileName,"a+");
	}

	if ( (cbType == CBTYPE_PROXY_RESPONSE) )
	{
		fwrite(RequestHeader,1,strlen(RequestHeader),Session);
		if (request)
		{
			if (request->HeaderSize)
				fwrite(request->Header,1,request->HeaderSize,Session);
			if (request->DataSize)
				fwrite(request->Data,1,request->DataSize,Session);
		}
		fwrite(ResponseHeader,1,strlen(ResponseHeader),Session);
		if (response)
		{
			if (response->HeaderSize)
				fwrite(response->Header,1,response->HeaderSize,Session);
			if (response->DataSize)
				fwrite(response->Data,1,response->DataSize,Session);
		}
		fwrite(Delim,1,strlen(Delim),Session);
		fflush(Session);
	}
	return(CBRET_STATUS_NEXT_CB_CONTINUE);

}

